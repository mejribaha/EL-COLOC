{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\nexport const NOTIFY_TYPES = {\n  GET_NOTIFIES: 'GET_NOTIFIES',\n  CREATE_NOTIFY: 'CREATE_NOTIFY',\n  REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n  UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n  UPDATE_SOUND: 'UPDATE_SOUND',\n  DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n};\nexport const createNotify = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    try {\n      const res = await postDataAPI('notify', msg, auth.token);\n      socket.emit('createNotify', {\n        ...res.data.notify,\n        user: {\n          username: auth.user.username,\n          avatar: auth.user.avatar\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const removeNotify = _ref2 => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    try {\n      await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\n      socket.emit('removeNotify', msg);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getNotifies = token => async dispatch => {\n  try {\n    const res = await getDataAPI('notifies', token);\n    dispatch({\n      type: NOTIFY_TYPES.GET_NOTIFIES,\n      payload: res.data.notifies\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const isReadNotify = _ref3 => {\n  let {\n    msg,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    dispatch({\n      type: NOTIFY_TYPES.UPDATE_NOTIFY,\n      payload: {\n        ...msg,\n        isRead: true\n      }\n    });\n    try {\n      await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteAllNotifies = token => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES,\n    payload: []\n  });\n  try {\n    await deleteDataAPI('deleteAllNotify', token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFIES","createNotify","_ref","msg","auth","socket","dispatch","res","token","emit","data","notify","user","username","avatar","err","type","ALERT","payload","error","response","removeNotify","_ref2","id","url","getNotifies","notifies","isReadNotify","_ref3","isRead","_id","deleteAllNotifies"],"sources":["E:/PFE/client/src/redux/actions/notifyAction.js"],"sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData'\r\n\r\nexport const NOTIFY_TYPES = {\r\n    GET_NOTIFIES: 'GET_NOTIFIES',\r\n    CREATE_NOTIFY: 'CREATE_NOTIFY',\r\n    REMOVE_NOTIFY: 'REMOVE_NOTIFY',\r\n    UPDATE_NOTIFY: 'UPDATE_NOTIFY',\r\n    UPDATE_SOUND: 'UPDATE_SOUND',\r\n    DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\r\n}\r\n\r\nexport const createNotify = ({msg, auth, socket}) => async (dispatch) => {\r\n    try {\r\n        const res = await postDataAPI('notify', msg, auth.token)\r\n\r\n        socket.emit('createNotify', {\r\n            ...res.data.notify,\r\n            user: {\r\n                username: auth.user.username,\r\n                avatar: auth.user.avatar\r\n            }\r\n        })\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const removeNotify = ({msg, auth, socket}) => async (dispatch) => {\r\n    try {\r\n        await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token)\r\n        \r\n        socket.emit('removeNotify', msg)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getNotifies = (token) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI('notifies', token)\r\n        \r\n        dispatch({ type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies })\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\n\r\nexport const isReadNotify = ({msg, auth}) => async (dispatch) => {\r\n    dispatch({type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: {...msg, isRead: true}})\r\n    try {\r\n        await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deleteAllNotifies = (token) => async (dispatch) => {\r\n    dispatch({type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES, payload: []})\r\n    try {\r\n        await deleteDataAPI('deleteAllNotify', token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}