{"ast":null,"code":"const Transport = require(\"../transport\");\nconst parser = require(\"engine.io-parser\");\nconst parseqs = require(\"parseqs\");\nconst yeast = require(\"yeast\");\nconst {\n  pick\n} = require(\"../util\");\nconst {\n  WebSocket,\n  usingBrowserWebSocket,\n  defaultBinaryType\n} = require(\"./websocket-constructor\");\nconst debug = require(\"debug\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nclass WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n    const opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n    try {\n      this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emit(\"error\", err);\n    }\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n    this.addEventListeners();\n  }\n\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n  addEventListeners() {\n    const self = this;\n    this.ws.onopen = function () {\n      self.onOpen();\n    };\n    this.ws.onclose = function () {\n      self.onClose();\n    };\n    this.ws.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.ws.onerror = function (e) {\n      self.onError(\"websocket error\", e);\n    };\n  }\n\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n  write(packets) {\n    const self = this;\n    this.writable = false;\n\n    // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n    let total = packets.length;\n    let i = 0;\n    const l = total;\n    for (; i < l; i++) {\n      (function (packet) {\n        parser.encodePacket(packet, self.supportsBinary, function (data) {\n          // always create a new object (GH-437)\n          const opts = {};\n          if (!usingBrowserWebSocket) {\n            if (packet.options) {\n              opts.compress = packet.options.compress;\n            }\n            if (self.opts.perMessageDeflate) {\n              const len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n              if (len < self.opts.perMessageDeflate.threshold) {\n                opts.compress = false;\n              }\n            }\n          }\n\n          // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n          try {\n            if (usingBrowserWebSocket) {\n              // TypeError is thrown when passing the second argument on Safari\n              self.ws.send(data);\n            } else {\n              self.ws.send(data, opts);\n            }\n          } catch (e) {\n            debug(\"websocket closed before onclose event\");\n          }\n          --total || done();\n        });\n      })(packets[i]);\n    }\n    function done() {\n      self.emit(\"flush\");\n\n      // fake drain\n      // defer to next tick to allow Socket to clear writeBuffer\n      setTimeout(function () {\n        self.writable = true;\n        self.emit(\"drain\");\n      }, 0);\n    }\n  }\n\n  /**\n   * Called upon close\n   *\n   * @api private\n   */\n  onClose() {\n    Transport.prototype.onClose.call(this);\n  }\n\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\";\n\n    // avoid port if default for schema\n    if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    }\n\n    // append timestamp to URI\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    // communicate binary support capabilities\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n    query = parseqs.encode(query);\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n  }\n\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n  check() {\n    return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n  }\n}\nmodule.exports = WS;","map":{"version":3,"names":["Transport","require","parser","parseqs","yeast","pick","WebSocket","usingBrowserWebSocket","defaultBinaryType","debug","isReactNative","navigator","product","toLowerCase","WS","constructor","opts","supportsBinary","forceBase64","name","doOpen","check","uri","protocols","extraHeaders","headers","ws","err","emit","binaryType","socket","addEventListeners","self","onopen","onOpen","onclose","onClose","onmessage","ev","onData","data","onerror","e","onError","write","packets","writable","total","length","i","l","packet","encodePacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","done","setTimeout","prototype","call","doClose","close","query","schema","secure","port","Number","timestampRequests","timestampParam","b64","encode","ipv6","hostname","indexOf","path","module","exports"],"sources":["E:/PFE/client/node_modules/engine.io-client/lib/transports/websocket.js"],"sourcesContent":["const Transport = require(\"../transport\");\nconst parser = require(\"engine.io-parser\");\nconst parseqs = require(\"parseqs\");\nconst yeast = require(\"yeast\");\nconst { pick } = require(\"../util\");\nconst {\n  WebSocket,\n  usingBrowserWebSocket,\n  defaultBinaryType\n} = require(\"./websocket-constructor\");\n\nconst debug = require(\"debug\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nconst isReactNative =\n  typeof navigator !== \"undefined\" &&\n  typeof navigator.product === \"string\" &&\n  navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n    const opts = isReactNative\n      ? {}\n      : pick(\n          this.opts,\n          \"agent\",\n          \"perMessageDeflate\",\n          \"pfx\",\n          \"key\",\n          \"passphrase\",\n          \"cert\",\n          \"ca\",\n          \"ciphers\",\n          \"rejectUnauthorized\",\n          \"localAddress\",\n          \"protocolVersion\",\n          \"origin\",\n          \"maxPayload\",\n          \"family\",\n          \"checkServerIdentity\"\n        );\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws =\n        usingBrowserWebSocket && !isReactNative\n          ? protocols\n            ? new WebSocket(uri, protocols)\n            : new WebSocket(uri)\n          : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emit(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n\n    this.addEventListeners();\n  }\n\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n  addEventListeners() {\n    const self = this;\n\n    this.ws.onopen = function() {\n      self.onOpen();\n    };\n    this.ws.onclose = function() {\n      self.onClose();\n    };\n    this.ws.onmessage = function(ev) {\n      self.onData(ev.data);\n    };\n    this.ws.onerror = function(e) {\n      self.onError(\"websocket error\", e);\n    };\n  }\n\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n  write(packets) {\n    const self = this;\n    this.writable = false;\n\n    // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n    let total = packets.length;\n    let i = 0;\n    const l = total;\n    for (; i < l; i++) {\n      (function(packet) {\n        parser.encodePacket(packet, self.supportsBinary, function(data) {\n          // always create a new object (GH-437)\n          const opts = {};\n          if (!usingBrowserWebSocket) {\n            if (packet.options) {\n              opts.compress = packet.options.compress;\n            }\n\n            if (self.opts.perMessageDeflate) {\n              const len =\n                \"string\" === typeof data\n                  ? Buffer.byteLength(data)\n                  : data.length;\n              if (len < self.opts.perMessageDeflate.threshold) {\n                opts.compress = false;\n              }\n            }\n          }\n\n          // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n          try {\n            if (usingBrowserWebSocket) {\n              // TypeError is thrown when passing the second argument on Safari\n              self.ws.send(data);\n            } else {\n              self.ws.send(data, opts);\n            }\n          } catch (e) {\n            debug(\"websocket closed before onclose event\");\n          }\n\n          --total || done();\n        });\n      })(packets[i]);\n    }\n\n    function done() {\n      self.emit(\"flush\");\n\n      // fake drain\n      // defer to next tick to allow Socket to clear writeBuffer\n      setTimeout(function() {\n        self.writable = true;\n        self.emit(\"drain\");\n      }, 0);\n    }\n  }\n\n  /**\n   * Called upon close\n   *\n   * @api private\n   */\n  onClose() {\n    Transport.prototype.onClose.call(this);\n  }\n\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\";\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n        (\"ws\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // append timestamp to URI\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    // communicate binary support capabilities\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n  check() {\n    return (\n      !!WebSocket &&\n      !(\"__initialize\" in WebSocket && this.name === WS.prototype.name)\n    );\n  }\n}\n\nmodule.exports = WS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}