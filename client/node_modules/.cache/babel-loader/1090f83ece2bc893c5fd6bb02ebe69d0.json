{"ast":null,"code":"const transports = require(\"./transports/index\");\nconst Emitter = require(\"component-emitter\");\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\nconst parser = require(\"engine.io-parser\");\nconst parseuri = require(\"parseuri\");\nconst parseqs = require(\"parseqs\");\nclass Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? 443 : 80);\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {}\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    }\n\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      addEventListener(\"beforeunload\", () => {\n        if (this.transport) {\n          // silently close the transport\n          this.transport.removeAllListeners();\n          this.transport.close();\n        }\n      }, false);\n    }\n    this.open();\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query);\n\n    // append engine.io protocol identifier\n    query.EIO = parser.protocol;\n\n    // transport name\n    query.transport = name;\n\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    });\n    debug(\"options: %j\", opts);\n    return new transports[name](opts);\n  }\n\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      const self = this;\n      setTimeout(function () {\n        self.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n    transport.open();\n    this.setTransport(transport);\n  }\n\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n    const self = this;\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n\n    // set up transport\n    this.transport = transport;\n\n    // set up transport listeners\n    transport.on(\"drain\", function () {\n      self.onDrain();\n    }).on(\"packet\", function (packet) {\n      self.onPacket(packet);\n    }).on(\"error\", function (e) {\n      self.onError(e);\n    }).on(\"close\", function () {\n      self.onClose(\"transport close\");\n    });\n  }\n\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, {\n      probe: 1\n    });\n    let failed = false;\n    const self = this;\n    Socket.priorWebsocketSuccess = false;\n    function onTransportOpen() {\n      if (self.onlyBinaryUpgrades) {\n        const upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n        failed = failed || upgradeLosesBinary;\n      }\n      if (failed) return;\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", function (msg) {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          self.upgrading = true;\n          self.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          debug('pausing current transport \"%s\"', self.transport.name);\n          self.transport.pause(function () {\n            if (failed) return;\n            if (\"closed\" === self.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n            cleanup();\n            self.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            self.emit(\"upgrade\", transport);\n            transport = null;\n            self.upgrading = false;\n            self.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          self.emit(\"upgradeError\", err);\n        }\n      });\n    }\n    function freezeTransport() {\n      if (failed) return;\n\n      // Any callback called by transport should be ignored since now\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    }\n\n    // Handle any error that happens while probing\n    function onerror(err) {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n      freezeTransport();\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n      self.emit(\"upgradeError\", error);\n    }\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n\n    // Remove all listeners on the transport and on self\n    function cleanup() {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      self.removeListener(\"close\", onclose);\n      self.removeListener(\"upgrading\", onupgrade);\n    }\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    transport.open();\n  }\n\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api public\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush();\n\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n      this.emit(\"packet\", packet);\n\n      // Socket is live - any packet counts\n      this.emit(\"heartbeat\");\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"pong\");\n          break;\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n  }\n\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n\n  /**\n   * Closes the connection.\n   *\n   * @api private\n   */\n  close() {\n    const self = this;\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", function () {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n    function close() {\n      self.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      self.transport.close();\n    }\n    function cleanupAndClose() {\n      self.removeListener(\"upgrade\", cleanupAndClose);\n      self.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    }\n    function waitForUpgrade() {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      self.once(\"upgrade\", cleanupAndClose);\n      self.once(\"upgradeError\", cleanupAndClose);\n    }\n    return this;\n  }\n\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, desc) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket close with reason: \"%s\"', reason);\n      const self = this;\n\n      // clear timers\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer);\n\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n\n      // ensure transport won't stay open\n      this.transport.close();\n\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n\n      // set ready state\n      this.readyState = \"closed\";\n\n      // clear session id\n      this.id = null;\n\n      // emit close event\n      this.emit(\"close\", reason, desc);\n\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      self.writeBuffer = [];\n      self.prevBufferLen = 0;\n    }\n  }\n\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\nmodule.exports = Socket;","map":{"version":3,"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","constructor","uri","opts","arguments","length","undefined","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","open","createTransport","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","self","setTimeout","emit","e","shift","setTransport","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","onlyBinaryUpgrades","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","i","l","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","clearTimeout","splice","writable","write","options","fn","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","pingIntervalTimer","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"sources":["E:/PFE/client/node_modules/engine.io-client/lib/socket.js"],"sourcesContent":["const transports = require(\"./transports/index\");\nconst Emitter = require(\"component-emitter\");\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\nconst parser = require(\"engine.io-parser\");\nconst parseuri = require(\"parseuri\");\nconst parseqs = require(\"parseqs\");\n\nclass Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts = {}) {\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    this.secure =\n      null != opts.secure\n        ? opts.secure\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname =\n      opts.hostname ||\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port =\n      opts.port ||\n      (typeof location !== \"undefined\" && location.port\n        ? location.port\n        : this.secure\n        ? 443\n        : 80);\n\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n\n    this.opts = Object.assign(\n      {\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        jsonp: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {}\n      },\n      opts\n    );\n\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    }\n\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      addEventListener(\n        \"beforeunload\",\n        () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        },\n        false\n      );\n    }\n\n    this.open();\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query);\n\n    // append engine.io protocol identifier\n    query.EIO = parser.protocol;\n\n    // transport name\n    query.transport = name;\n\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n\n    const opts = Object.assign(\n      {},\n      this.opts.transportOptions[name],\n      this.opts,\n      {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }\n    );\n\n    debug(\"options: %j\", opts);\n\n    return new transports[name](opts);\n  }\n\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (\n      this.opts.rememberUpgrade &&\n      Socket.priorWebsocketSuccess &&\n      this.transports.indexOf(\"websocket\") !== -1\n    ) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      const self = this;\n      setTimeout(function() {\n        self.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n    const self = this;\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n\n    // set up transport\n    this.transport = transport;\n\n    // set up transport listeners\n    transport\n      .on(\"drain\", function() {\n        self.onDrain();\n      })\n      .on(\"packet\", function(packet) {\n        self.onPacket(packet);\n      })\n      .on(\"error\", function(e) {\n        self.onError(e);\n      })\n      .on(\"close\", function() {\n        self.onClose(\"transport close\");\n      });\n  }\n\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, { probe: 1 });\n    let failed = false;\n    const self = this;\n\n    Socket.priorWebsocketSuccess = false;\n\n    function onTransportOpen() {\n      if (self.onlyBinaryUpgrades) {\n        const upgradeLosesBinary =\n          !this.supportsBinary && self.transport.supportsBinary;\n        failed = failed || upgradeLosesBinary;\n      }\n      if (failed) return;\n\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\n      transport.once(\"packet\", function(msg) {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          self.upgrading = true;\n          self.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n          debug('pausing current transport \"%s\"', self.transport.name);\n          self.transport.pause(function() {\n            if (failed) return;\n            if (\"closed\" === self.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n\n            cleanup();\n\n            self.setTransport(transport);\n            transport.send([{ type: \"upgrade\" }]);\n            self.emit(\"upgrade\", transport);\n            transport = null;\n            self.upgrading = false;\n            self.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          self.emit(\"upgradeError\", err);\n        }\n      });\n    }\n\n    function freezeTransport() {\n      if (failed) return;\n\n      // Any callback called by transport should be ignored since now\n      failed = true;\n\n      cleanup();\n\n      transport.close();\n      transport = null;\n    }\n\n    // Handle any error that happens while probing\n    function onerror(err) {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n\n      freezeTransport();\n\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n      self.emit(\"upgradeError\", error);\n    }\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n\n    // Remove all listeners on the transport and on self\n    function cleanup() {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      self.removeListener(\"close\", onclose);\n      self.removeListener(\"upgrading\", onupgrade);\n    }\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    transport.open();\n  }\n\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api public\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush();\n\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\n      \"open\" === this.readyState &&\n      this.opts.upgrade &&\n      this.transport.pause\n    ) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n      this.emit(\"packet\", packet);\n\n      // Socket is live - any packet counts\n      this.emit(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n  }\n\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\n      \"closed\" !== this.readyState &&\n      this.transport.writable &&\n      !this.upgrading &&\n      this.writeBuffer.length\n    ) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n\n  /**\n   * Closes the connection.\n   *\n   * @api private\n   */\n  close() {\n    const self = this;\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", function() {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    function close() {\n      self.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      self.transport.close();\n    }\n\n    function cleanupAndClose() {\n      self.removeListener(\"upgrade\", cleanupAndClose);\n      self.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    }\n\n    function waitForUpgrade() {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      self.once(\"upgrade\", cleanupAndClose);\n      self.once(\"upgradeError\", cleanupAndClose);\n    }\n\n    return this;\n  }\n\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, desc) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket close with reason: \"%s\"', reason);\n      const self = this;\n\n      // clear timers\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer);\n\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n\n      // ensure transport won't stay open\n      this.transport.close();\n\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n\n      // set ready state\n      this.readyState = \"closed\";\n\n      // clear session id\n      this.id = null;\n\n      // emit close event\n      this.emit(\"close\", reason, desc);\n\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      self.writeBuffer = [];\n      self.prevBufferLen = 0;\n    }\n  }\n\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i]))\n        filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\nmodule.exports = Socket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}