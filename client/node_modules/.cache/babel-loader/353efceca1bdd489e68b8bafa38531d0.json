{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI } from '../../utils/fetchData';\nimport valid from '../../utils/valid';\nexport const login = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI('login', data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const refreshToken = () => async dispatch => {\n  const firstLogin = localStorage.getItem(\"firstLogin\");\n  if (firstLogin) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    try {\n      const res = await postDataAPI('refresh_token');\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          token: res.data.access_token,\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {}\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const register = data => async dispatch => {\n  const check = valid(data);\n  if (check.errLength > 0) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: check.errMsg\n  });\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI('register', data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    localStorage.removeItem('firstLogin');\n    await postDataAPI('logout');\n    window.location.href = \"/\";\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","valid","login","data","dispatch","type","ALERT","payload","loading","res","AUTH","token","access_token","user","localStorage","setItem","success","msg","err","error","response","refreshToken","firstLogin","getItem","register","check","errLength","errMsg","logout","removeItem","window","location","href"],"sources":["E:/PFE/client/src/redux/actions/authAction.js"],"sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { postDataAPI } from '../../utils/fetchData'\r\nimport valid from '../../utils/valid'\r\n\r\n\r\nexport const login = (data) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n        const res = await postDataAPI('login', data)\r\n        dispatch({ \r\n            type: GLOBALTYPES.AUTH, \r\n            payload: {\r\n                token: res.data.access_token,\r\n                user: res.data.user\r\n            } \r\n        })\r\n\r\n        localStorage.setItem(\"firstLogin\", true)\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                success: res.data.msg\r\n            } \r\n        })\r\n        \r\n    } catch (err) {\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                error: err.response.data.msg\r\n            } \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const refreshToken = () => async (dispatch) => {\r\n    const firstLogin = localStorage.getItem(\"firstLogin\")\r\n    if(firstLogin){\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n\r\n        try {\r\n            const res = await postDataAPI('refresh_token')\r\n            dispatch({ \r\n                type: GLOBALTYPES.AUTH, \r\n                payload: {\r\n                    token: res.data.access_token,\r\n                    user: res.data.user\r\n                } \r\n            })\r\n\r\n            dispatch({ type: GLOBALTYPES.ALERT, payload: {} })\r\n\r\n        } catch (err) {\r\n            dispatch({ \r\n                type: GLOBALTYPES.ALERT, \r\n                payload: {\r\n                    error: err.response.data.msg\r\n                } \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (data) => async (dispatch) => {\r\n    const check = valid(data)\r\n    if(check.errLength > 0)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: check.errMsg})\r\n\r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\r\n\r\n        const res = await postDataAPI('register', data)\r\n        dispatch({ \r\n            type: GLOBALTYPES.AUTH, \r\n            payload: {\r\n                token: res.data.access_token,\r\n                user: res.data.user\r\n            } \r\n        })\r\n\r\n        localStorage.setItem(\"firstLogin\", true)\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                success: res.data.msg\r\n            } \r\n        })\r\n    } catch (err) {\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                error: err.response.data.msg\r\n            } \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    try {\r\n        localStorage.removeItem('firstLogin')\r\n        await postDataAPI('logout')\r\n        window.location.href = \"/\"\r\n    } catch (err) {\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                error: err.response.data.msg\r\n            } \r\n        })\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}